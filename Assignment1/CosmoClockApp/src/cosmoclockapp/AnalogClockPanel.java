/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cosmoclockapp;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;

/**
 *
 * @author Ankit
 */
public class AnalogClockPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalogClockPanel
     */
    private int hr, min, sec;
    float scalefactor = 1;

    public AnalogClockPanel()
    {

        initComponents();
        setSize(200, 200);
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        Graphics2D clk = (Graphics2D) g;
        setBackground(Color.WHITE);
        int xcenter = getWidth() / 2;
        int ycenter = getHeight() / 2;
        int minxy = xcenter < ycenter ? xcenter : ycenter;
        g.setColor(Color.BLUE);
        minxy *= scalefactor;
        g.drawString("12", xcenter - 6, ycenter - minxy + 18);
        g.drawString("3", xcenter + minxy - 15, ycenter + 5);
        g.drawString("6", xcenter - 3, ycenter + minxy - 8);
        g.drawString("9", xcenter - minxy + 8, ycenter + 5);
        minxy -= 5;
        g.setColor(Color.BLACK);
        clk.drawArc(xcenter - minxy, ycenter - minxy, 2 * minxy, 2 * minxy, 0, 360);
        double secAngle = 2 * Math.PI * sec / 60;
        double minAngle = (2 * Math.PI * min / 60) + (6 * secAngle / 180);
        double hrAngle = 2 * Math.PI * hr / 12 + 0.5 * minAngle / 180;
        secAngle -= Math.PI / 2;
        minAngle -= Math.PI / 2;
        hrAngle -= Math.PI / 2;
        g.setColor(Color.ORANGE);
        g.drawLine(xcenter, ycenter, (int) (xcenter + 0.6 * minxy * Math.cos(hrAngle)), (int) (ycenter + 0.6 * minxy * Math.sin(hrAngle)));
        g.setColor(Color.GREEN);
        g.drawLine(xcenter, ycenter, (int) (xcenter + 0.75 * minxy * Math.cos(minAngle)), (int) (ycenter + 0.75 * minxy * Math.sin(minAngle)));
        g.setColor(Color.RED);
        g.drawLine(xcenter, ycenter, (int) (xcenter + 0.9 * minxy * Math.cos(secAngle)), (int) (ycenter + 0.9 * minxy * Math.sin(secAngle)));
        //   clk.draw(null);
        //clk.fillRect(WIDTH, WIDTH, WIDTH, WIDTH);

    }

    public void drawclock(int hr1, int min1, int sec1)
    {
        hr = hr1;
        min = min1;
        sec = sec1;
        repaint();
    }

    public void setscalefactor(float num)
    {
        scalefactor = num;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
